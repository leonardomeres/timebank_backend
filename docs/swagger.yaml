basePath: /api
definitions:
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Area:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.GenericErrorResponse:
    properties:
      error:
        example: Operation failed
        type: string
    type: object
  models.GenericUnauthorizedResponse:
    properties:
      error:
        example: Unauthorized
        type: string
    type: object
  models.GetProfileResponse:
    properties:
      balance:
        example: 4
        type: number
      email:
        example: bob@example.com.br
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Bob
        type: string
      skills:
        example:
        - '["Programming"'
        - ' "Design"]'
        items:
          type: string
        type: array
    type: object
  models.LoginFailResponse:
    properties:
      error:
        example: Invalid password credentials
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.Skill:
    properties:
      area:
        $ref: '#/definitions/models.Area'
      area_id:
        type: integer
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/models.User'
      created_by_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.SkillCreationResponse:
    properties:
      response:
        example: Skill created successfully
        type: string
    type: object
  models.SkillExistsResponse:
    properties:
      error:
        example: Skill already exists
        type: string
    type: object
  models.SkillFailCreationResponse:
    properties:
      error:
        example: Failed to create skill
        type: string
    type: object
  models.User:
    properties:
      balance:
        type: number
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
      password:
        type: string
      skills:
        items:
          $ref: '#/definitions/models.Skill'
        type: array
      type:
        description: admin, user, etc.
        type: string
      updated_at:
        type: string
    type: object
  models.UserRegistrationErrorResponse:
    properties:
      error:
        example: Email already registered
        type: string
    type: object
  models.UserRegistrationResponse:
    properties:
      message:
        example: User created successfully
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for user registration, login, and skill management in TimeBank.
  title: TimeBank API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT token
      parameters:
      - description: Login input
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.LoginFailResponse'
      summary: User login
      tags:
      - auth
  /profile:
    get:
      description: Retrieves the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GenericUnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Get user profile
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with hashed password
      parameters:
      - description: User registration input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.UserRegistrationErrorResponse'
      summary: Register new user
      tags:
      - auth
  /skills:
    post:
      consumes:
      - application/json
      description: Allows authenticated users to create a new skill
      parameters:
      - description: Skill creation input
        in: body
        name: skill
        required: true
        schema:
          $ref: '#/definitions/models.Skill'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SkillCreationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GenericUnauthorizedResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.SkillExistsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SkillFailCreationResponse'
      summary: Create a new skill
      tags:
      - user
schemes:
- http
swagger: "2.0"
